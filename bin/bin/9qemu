#!/usr/bin/env ruby
# frozen_string_literal: true

VM_DIR = "#{ENV['HOME']}/VM"
QCOW_IMG = "#{VM_DIR}/9front.qcow2.img"
ISO_DIR = "#{VM_DIR}/ISO"
ISO_FILE = "#{ISO_DIR}/9front.386.iso"
IMAGE_SIZE = '30G'
VM_MEMORY = '1024'
MAC_ADDR = '52:54:00:00:EE:03'

def die(message = 'An error occurred')
  raise message.to_s
end

def create_qcow2_image
  puts 'Creating QCOW2 image...'
  Dir.mkdir(VM_DIR.to_s) || die('Failed to create VM directory.')
  args = %W[qemu-img create -f qcow2 #{QCOW_IMG} #{IMAGE_SIZE}]
  exec(*args) || die('Failed to create QCOW2 image.')
  puts 'QCOW2 image created at: ' # {QCOW_IMG}."
end

def run_vm
  puts 'Running the 9front VM...'
  args = <<~EOF
    qemu-system-x86_64 -cpu host -enable-kvm -m "#{VM_MEMORY}" \
    -net nic,model=virtio,macaddr="#{MAC_ADDR}" -net user \
    -device virtio-scsi-pci,id=scsi \
    -drive if=none,id=vd0,file="#{QCOW_IMG}" \
    -device scsi-hd,drive=vd0 \
    -drive if=none,id=vd1,file="#{ISO_FILE}" \
    -device scsi-cd,drive=vd1,bootindex=0#{' '}
  EOF
  exec(*args) || die('Failed to start the VM.')
end

def usage
  puts "Usage: #{$PROGRAM_NAME} (create|run)"
  puts '  create: Creates a QCOW2 image for the VM.'
  puts '  run: Runs the 9front VM using QEMU.'
  exit 1
end

begin
  op = ARGV.first
  case op
  when 'create' then create_qcow2_image
  when 'run' then run_vm
  else usage
  end
rescue StandardError, RuntimeError => e
  puts "Error: #{e.message}"
end
